#!/bin/bash

# HELPER VARIABLES ==============================================================================

dir="$(pwd)"                                               # Directory where script was started.
iid="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 10; echo)" # Random ID for tmp and chroot pathes.
path_tmp="/tmp/gentoo-setup-${iid}"                        # Temporary files storage directory.
path_chroot="/mnt/gentoo-setup-${iid}"                     # Gentoo chroot environment directory.
quiet_flag='--quiet'                                       # Flag used to silence the output.
branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo main)" # Name of current branch if running from git repository
url_installer="https://raw.githubusercontent.com/damiandudycz/ps3/${branch}/dev-tools/ps3-installer/ps3-gentoo-installer"

# MAIN PROGRAM ==================================================================================

## Prepare --------------------------------------------------------------------------------------
source <(sed '1,/^# FUNCTIONS #.*$/d' "$0") # Load functions at the bottom of the script.

read_variables "$@"      # Read user input variables - device, configuration, verbose.
validate_input_data      # Validate if input data is correct.
prepare_directories      # Create path_tmp and path_chroot.
get_config               # Download configuration or load local configuration file.
validate_config          # Checks if all settings in configuration are set correctly.
download_stages          # Download list of source stage tarballs and ask which one to use.

## Setup disk -----------------------------------------------------------------------------------
warn_about_disk_wiping   # Asks user to confirm disk formatting.
sort_partitions          # Prepare array of devices sorted by mounting order.
disk_clean_signatures    # Remove signatures of partition table, and partitions from the disk.
disk_create_partitions   # Create new partitions, definied in the configuration.
disk_create_filesystems  # Create filesystems definied in the configuration.
disk_mount_partitions    # Mount new partitions to temporary locations in chroot.

## Download and extract stage3/4 ----------------------------------------------------------------
gentoo_download          # Download newest Stage3 or Stage4 tarball.
gentoo_extract           # Extract tarball to chroot directory.

## Prepare for chroot ---------------------------------------------------------------------------
prepare_chroot           # Mount devices required for chroot to work and copies resolve.conf.

## Portage configuration ------------------------------------------------------------------------
setup_make_conf          # Configure make.conf flags.
setup_env                # Writes env overrides for selected packages.
setup_packages_config    # Configure package.use, package.accep_keywords.

## Various configs ------------------------------------------------------------------------------
setup_root_password      # Sets root password to selected.
setup_fstab              # Generates fstab file from configuration.
setup_hostname           # Sets hostname.
setup_network_link       # Setup network devices links and configs.
setup_main_repo          # Creates empty directory, removes warning before syncing portage.

## Setup PS3 Gentoo internal chroot environment -------------------------------------------------
update_environment       # Refreshing env variables.
setup_locales            # Generate locales and select default one.
setup_portage_repository # Downloads latest portage tree.
setup_binhosts           # Configure binrepos if added in config.
setup_timezone           # Selects timezone.
install_base_tools       # Installs tools needed at early stage, before distcc is available.
setup_distcc_client      # Downloads and configures distcc if used.
setup_overlays           # Add overlays using eselect repository.
install_updates          # Updates and rebuilds @world system including new use flags.
install_other_tools      # Installs other selected tools.
setup_conf_d             # Creates /etc/conf.d entries from config.
setup_autostart          # Adds init scripts to selected runlevels.
setup_user               # Create default user if configured.
setup_bootloader         # Updates entries in bootloader configuration file.

## Cleanup and exit -----------------------------------------------------------------------------
revdep_rebuild           # Fixes broken dependencies.
cleanup                  # Cleans unneded files.
unprepare_chroot         # Unmounts devices and removed DNS configuration.
disk_unmount_partitions  # Unmounts partitions.
cleanup_directories      # Removes temporart installation files.
summary                  # Show summary information if applicable.

exit # The rest of the script is loaded automatically using 'source'.

# FUNCTIONS # ===================================================================================

log() {
    local color="$1"
    shift
    local msg="$@"
    local color_value
    case "$color" in
    'black') color_value="30" ;;
    'red') color_value="31" ;;
    'green') color_value="32" ;;
    'yellow') color_value="33" ;;
    'blue') color_value="34" ;;
    'magneta') color_value="35" ;;
    'cyan') color_value="36" ;;
    'white') color_value="37" ;;
    *) color_value="37" ;;
    esac
    echo -e "\033[0;${color_value}m[ $msg ]\033[0m"
}

error() {
    log red "$@"
    exit
}

error_continue() {
    log red "$@"
    local prompt="c - continue; e - exit; r - repeat: "
    local response

    while true; do
        read -p "$prompt" response
        case "$response" in
        "c" | "continue")
            break
            ;;
        "e" | "exit")
            exit 1
            ;;
        "r" | "repeat")
            try "$@"
            break
            ;;
        *) ;;
        esac
    done
}

try() {
    log cyan "$@"
    if [ -n "$quiet_flag" ]; then
        "$@" > /dev/null
    else
        "$@"
    fi
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        error_continue "$@"
    fi
}

print_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  --device <device>                 Specify the device to use."
    echo "  --directory <directory>           Specify the directory to work in."
    echo ""
    echo "  --config <config_file>            Use a custom configuration file."
    echo "  --edit-config                     Modify configuration file before installation."
    echo ""
    echo "  --hostname <hostname>             Set system hostname."
    echo "  --username <username>             Set default user name."
    echo "  --password <password>             Set default password."
    echo "  --autologin                       Enable default user automatic login on tty1."
    echo "  --root-password <password>        Set root password."
    echo ""
    echo "  --verbose                         Enable verbose output."
    echo ""
    echo "  --update                          Perform system update."
    echo "  --distcc <host>                   Specify a distcc host."
    exit 1
}

chroot_call() {
    try chroot "$path_chroot" '/bin/bash' -c "$@"
}

# Moves used memory to swap, to free some RAM
free_memory() {
    sync && echo 3 > /proc/sys/vm/drop_caches
}

## Main functions -------------------------------------------------------------------------------

# Append values for existing settings in make.conf
append_make_config() {
    local path_make_conf="$path_chroot/etc/portage/make.conf"
    local key="$1"
    local value="$2"
    if grep -q "$key=" "$path_make_conf"; then
        local original_value=$(grep "^$key=" "$path_make_conf" | sed -e "s/^$key=\"\(.*\)\"$/\1/")
        local new_values=""
        for val in $value; do
            if [[ ! " $original_value " =~ " $val " ]]; then
                new_values="$new_values $val"
            fi
        done
        new_values=$(echo "$new_values" | xargs)
        if [ -n "$new_values" ]; then
            try sed -i "/^$key=/ s/\"\(.*\)\"/\"\1 $new_values\"/" "$path_make_conf"
        fi
    else
        echo "$key=\"$value\"" | try tee -a "$path_make_conf" >/dev/null
    fi
}

# Set new value in make.conf
insert_make_config() {
    local path_make_conf="$path_chroot/etc/portage/make.conf"
    local key="$1"
    local value="$2"
    if grep -q "$key=" "$path_make_conf"; then
        try sed -i "s/^$key=.*/$key=\"$value\"/" "$path_make_conf"
    else
        echo "$key=\"$value\"" | try tee -a "$path_make_conf" >/dev/null
    fi
}

read_variables() {
    while [ $# -gt 0 ]; do
        case "$1" in
        --device)
            shift
            if [ $# -gt 0 ]; then
                disk_device="$1"
                installation_type='disk'
            fi
            ;;
        --directory)
            shift
            if [ $# -gt 0 ]; then
                path_chroot="$1"
                install_directory="$path_chroot"
                installation_type='directory'
            fi
            ;;
        --config)
            shift
            if [ $# -gt 0 ]; then
                config_file="$1"
            fi
            ;;
	--edit-config)
            edit_config=true
            ;;
        --verbose)
            unset quiet_flag
            verbose_flag="--verbose"
            ;;
        --distcc)
            shift
            if [ $# -gt 0 ]; then
                distcc_hosts="$1"
            fi
            ;;
        --root-password)
            shift
            if [ $# -gt 0 ]; then
                root_password="$1"
            fi
            ;;
        --password)
            shift
            if [ $# -gt 0 ]; then
                password="$1"
            fi
            ;;
        --username)
            shift
            if [ $# -gt 0 ]; then
                username="$1"
            fi
            ;;
        --autologin)
            autologin=true
            ;;
        --update)
            update=true
            ;;
        --hostname)
            shift
            if [ $# -gt 0 ]; then
                hostname="$1"
            fi
            ;;
        *)
            error "Unknown option: $1"
            ;;
        esac
        shift
    done

    # Set default value of config if none specified
    if [ -z "$config_file" ]; then
        config_file="/etc/ps3-gentoo-installer/config.json"
    fi
}

validate_input_data() {
    # Validate if required properties are set.
    if [ -z "$disk_device" ] && [ -z "$install_directory" ]; then
        print_usage
    fi
    if [ ! -z "$disk_device" ] && [ ! -z "$install_directory" ]; then
        print_usage
    fi
    # Validate if disk is not being used.
    if [ "$installation_type" = 'disk' ] && [ ! -e "$disk_device" ]; then
        error "Device $disk_device does not exists."
    fi
    if [ "$installation_type" = 'disk' ] && [ -n "$(lsblk -no MOUNTPOINT "$disk_device")" ]; then
        error "Device $disk_device is currently in use. Unmount it before usage."
    fi
}

warn_about_disk_wiping() {
    if [ "$installation_type" = 'disk' ]; then
        log red "WARNING! If you continue, disk $disk_device will be completly erased. Do you want to continue?"
        local prompt="yes - continue and wipe disk; no - exit: "
        local response

        while true; do
            read -p "$prompt" response
            case "$response" in
            "yes")
                break
                ;;
            *)
                log red "Exiting."
                exit 1
                ;;
            esac
        done
    fi
}

prepare_directories() {
    if [ ! -d "$path_tmp" ]; then
        try mkdir -p "$path_tmp"
    fi
    if [ ! -d "$path_tmp/scripts" ]; then
        try mkdir -p "$path_tmp/scripts"
    fi
    if [ ! -d "$path_chroot" ]; then
        try mkdir -p "$path_chroot"
    fi
}

get_config() {
    # Get config from the repository or local file.
    local path_config="$path_tmp/config.json"
    try cp "$config_file" "$path_config"
    if [ "$edit_config" = true ]; then
        nano "$path_config"
    fi
    config=$(cat "${path_config}")
    if [ -z "${config}" ]; then
        error "Failed to load configuration."
    fi
    # Overwrite config from run arguments.
    if [ -n "$username" ]; then
	config=$(echo "$config" | jq ".user.username = \"${username}\"")
    fi
    if [ -n "$password" ]; then
	config=$(echo "$config" | jq ".user.password = \"${password}\"")
    fi
    if [ -n "$autologin" ]; then
	config=$(echo "$config" | jq ".user.autologin = ${autologin}")
    fi
    if [ -n "$hostname" ]; then
	config=$(echo "$config" | jq ".hostname = \"${hostname}\"")
    fi
}

# cfg [key] <--asjson> <--from JSON_STRING> <--arg NAME VALUE>
cfg() {
    local asjson=false
    local json="$config"
    local key=""
    local argv=""

    while [ $# -gt 0 ]; do
        case "$1" in
        --asjson)
            asjson=true
            ;;
        --from)
            shift
            json="$1"
            ;;
        --arg)
            shift
            k="$1"
            shift
            v="$1"
            argv="$argv --arg $k \"$v\""
            ;;
        *)
            key="$1"
            ;;
        esac
        shift
    done

    if [ -n "$key" ]; then
        if [ "$asjson" = true ]; then
            echo "${json}" | jq -c $argv "${key}"
        else
            # For normal variables (not arrays) it replaces null with empty string
            if [[ ! "$key" =~ \[\]$ ]]; then
                key="${key} // \"\""
            fi
            echo "${json}" | jq -c -r $argv "${key}"
        fi
    fi
}

validate_config() {
    # TODO: Validate settings.
    return
}

sort_partitions() {
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    disk_partitions=($(cfg '.disk.partitions[]' --asjson))

    # Add index to partitions data
    local indexed_partitions=()
    local index=1
    for partition in "${disk_partitions[@]}"; do
        indexed_partition=$(echo "$partition" | jq --argjson idx "$index" '. + {index: $idx}')
        indexed_partitions+=("$indexed_partition")
        ((index++))
    done
    disk_partitions=("${indexed_partitions[@]}")

    partitions_json=$(printf "%s\n" "${disk_partitions[@]}" | jq -s '.')
    disk_partitions_sorted_by_mount_order=($(cfg --from "${partitions_json}" 'sort_by(.order)[]' --asjson))
}

disk_clean_signatures() {
    # Cleans signatures from partition table and every partition.
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    for partition in "$disk_device"*; do
        if [[ -b "$partition" && "$partition" != "$disk_device" ]]; then
            try wipefs -fa "$partition"
        fi
    done
    try wipefs -fa "$disk_device"
    try sleep 1 # Without sleep blockdev below sometimes fails
    try blockdev --rereadpt -v "$disk_device"
}

disk_create_partitions() {
    # Create partitions on device.
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    local fdisk_command=''
    local disk_scheme=$(cfg .disk.scheme)

    if [ "$disk_scheme" = 'gpt' ]; then
        fdisk_command='g\n'
    elif [ "$disk_scheme" = 'dos' ]; then
        fdisk_command='o\n'
    else
        error "Unsupported partition scheme."
    fi

    # Creating partition for given configuration.
    create_partition_from_config() {
        local disk_device="$1"
        local disk_scheme="$2"
        local partition_data="$3"
        local partition_data_size=$(cfg --from "$partition_data" .size)
        local index=$(cfg --from "$partition_data" .index)
        local primary_partition_selector="" # Adds "p\n" for MBR partition scheme to command.
        if [ "$disk_scheme" = 'dos' ]; then
            primary_partition_selector='p\n'
        fi
        fdisk_command="${fdisk_command}n\n${primary_partition_selector}${index}\n\n${partition_data_size}\n"
    }

    for part_config in "${disk_partitions[@]}"; do
        create_partition_from_config "$disk_device" "$disk_scheme" "$part_config"
    done
    # Write new partition scheme
    fdisk_command="${fdisk_command}w\n"
    printf "$fdisk_command" | try fdisk "$disk_device" --wipe auto
}

disk_create_filesystems() {
    # Creating filesystem for given configuration.
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    create_filesystem_from_config() {
        local disk_device="$1"
        local partition_data="$2"
        local partition_data_filesystem=$(cfg --from "$partition_data" .filesystem)
        local index=$(cfg --from "$partition_data" .index)
        local partition_device="${disk_device}${index}"
	if [ ! -z "${quiet_flag}" ]; then
	    quiet_flag_short='-q' # Quiet flag used to silence the output.
 	fi
        case "$partition_data_filesystem" in
        'vfat') try mkfs.vfat -F32 "$partition_device" ;;
        'ext3') try mkfs.ext3 -F $quiet_flag_short "$partition_device" ;;
        'ext4') try mkfs.ext4 -F $quiet_flag_short "$partition_device" ;;
        'btrfs') try mkfs.btrfs -f $quiet_flag_short "$partition_device" ;;
        'swap') try mkswap $quiet_flag_short "$partition_device" ;;
        *) error "Unknown partition filesystem $partition_data_filesystem" ;;
        esac
    }
    for part_config in "${disk_partitions[@]}"; do
        create_filesystem_from_config "$disk_device" "$part_config"
    done
}

disk_mount_partitions() {
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    mount_filesystem_from_config() {
        local disk_device="$1"
        local partition_data="$2"
	local index=$(cfg --from "$partition_data" .index)
        local partition_data_filesystem=$(cfg --from "$partition_data" .filesystem)
        local partition_data_mount_point=$(cfg --from "$partition_data" .mount_point)
        local partition_device="${disk_device}${index}"
        local partition_mount_path="$path_chroot$partition_data_mount_point"
        if [ "$partition_data_mount_point" != 'none' ]; then
            if [ ! -d "$partition_mount_path" ]; then
                try mkdir "$partition_mount_path"
            fi
            try mount "$partition_device" "$partition_mount_path"
        fi
        if [ "$partition_data_filesystem" = 'swap' ]; then
            try swapon "$partition_device"
        fi
    }
    for part_config in "${disk_partitions_sorted_by_mount_order[@]}"; do
        mount_filesystem_from_config "$disk_device" "$part_config"
    done
}

# Downloading files =============================================================================

download_stages() {
    free_memory
    declare -A stage_sources
    local index=1
    local stage_types=($(cfg .stage_types[]))
    local base_url_autobuilds=$(cfg .base_url_autobuilds)
    local supported_arch=($(cfg .supported_arch[]))
    local init_system=$(cfg .init_system)

    for stage in "${stage_types[@]}"; do
        local stageinfo_url="${base_url_autobuilds}/latest-${stage}.txt"
        local latest_gentoo_content=$(wget -q -O - "$stageinfo_url" --no-http-keep-alive --no-cache --no-cookies)

        while IFS= read -r line; do
            entry="${line%% *}"
            if [[ "$entry" == *"-${init_system}"* ]]; then
                arch_matches=false
                for arch in "${supported_arch[@]}"; do
                    if [[ "$entry" == *"$stage-$arch-"* ]]; then
                        arch_matches=true
                    fi
                done
                if [[ $arch_matches == true ]]; then
                    stage_sources[$index]="$entry"
                    ((index++))
                fi
            fi
        done <<< "$latest_gentoo_content"
    done

    if [ ${#stage_sources[@]} -eq 0 ]; then
        error "Failed to get stage tarball sources"
    fi

    while true; do
        echo "Available stage tarballs:"
        for key in $(printf "%s\n" "${!stage_sources[@]}" | sort -n); do
            entry="${stage_sources[$key]}"
            trimmed_entry="${entry%-*}"
            echo "  [$key] $trimmed_entry"
        done
        read -p "Please select source stage tarball. In in doubt, select [1]: " selection
        source_stage="${stage_sources[$selection]}"
        if [[ -n "$source_stage" ]]; then
            url_gentoo_tarball="$base_url_autobuilds/$source_stage"
            echo "Proceeding with: ${source_stage}"
            break
        fi
    done
}

gentoo_download() {
    free_memory
    local path_download="$path_chroot/gentoo.tar.xz"
    # Download stage3/4 file
    try wget "$url_gentoo_tarball" -O "$path_download" $quiet_flag
}

gentoo_extract() {
    free_memory
    local path_stage3or4="$path_chroot/gentoo.tar.xz"
    try tar -I 'xz -T1' -xvpf "$path_stage3or4" --xattrs-include="*/*" --numeric-owner --blocking-factor=1 -C "$path_chroot/"
    try rm "$path_stage3or4"
}

# Configuring system ============================================================================

prepare_chroot() {
    # Mount required devices.
    try mount --types proc /proc "$path_chroot/proc"
    try mount --rbind /sys "$path_chroot/sys"
    try mount --make-rslave "$path_chroot/sys"
    try mount --rbind /dev "$path_chroot/dev"
    try mount --make-rslave "$path_chroot/dev"
    try mount --bind /run "$path_chroot/run"
    try mount --make-slave "$path_chroot/run"
    # Copy DNS information.
    try cp --dereference '/etc/resolv.conf' "$path_chroot/etc/resolv.conf"
}

setup_make_conf() {
    local path_make="$path_chroot/etc/portage/make.conf"
    local opts=$(cfg .portage.make_conf --asjson)
    local keys=($(cfg --from "$opts" keys[]))
    for key in "${keys[@]}"; do
        if [[ $key == +* ]]; then
            # Concating changes to existing entry if found
            key="${key:1}"
            local value=$(cfg ".[\"+$key\"]" --from "$opts")
            append_make_config "$key" "$value"
        else
            # Adding/Replacing whole entry
            local value=$(cfg ".[\"$key\"]" --from "$opts")
            insert_make_config "$key" "$value"
        fi
    done
}

setup_env() {
    mkdir -p "$path_chroot/etc/portage/env"
    local path_env="$path_chroot/etc/portage/env"
    local envs=$(cfg .portage.env --asjson)
    local keys=($(cfg --from "$envs" keys[]))
    for key in "${keys[@]}"; do
	local category=$(echo "$key" | cut -d'/' -f1)
        mkdir -p "$path_env/$category"
        mapfile -t lines < <(cfg --from "${envs}" ".[\"${key}\"][]")
        for line in "${lines[@]}"; do
            echo "$line" | try tee -a "$path_env/$key" >/dev/null
        done
    done
}

setup_packages_config() {
    mkdir -p "$path_chroot/etc/portage/package.accept_keywords"
    mkdir -p "$path_chroot/etc/portage/package.use"
    # USE
    local path_package_use="$path_chroot/etc/portage/package.use"
    local use=$(cfg .portage.use --asjson)
    local keys_use=($(cfg --from "$use" keys[]))
    for key in "${keys_use[@]}"; do
        mapfile -t lines < <(cfg --from "${use}" ".[\"${key}\"][]")
        for line in "${lines[@]}"; do
            grep -qxF "$line" "$path_package_use/$key" || echo "$line" | tee -a "$path_package_use/$key" >/dev/null
        done
    done
    # Accept keywords
    local path_package_accept_keywords="$path_chroot/etc/portage/package.accept_keywords"
    local accept=$(cfg .portage.accept --asjson)
    local keys_accept=($(cfg --from "$accept" keys[]))
    for key in "${keys_accept[@]}"; do
        mapfile -t lines < <(cfg --from "${accept}" ".[\"${key}\"][]")
        for line in "${lines[@]}"; do
            grep -qxF "$line" "$path_package_accept_keywords/$key" || echo "$line" | tee -a "$path_package_accekt_keywords/$key" >/dev/null
        done
    done
}

setup_binhosts() {
    local path_binrepos="$path_chroot/etc/portage/binrepos.conf"
    if [ ! -d "$path_binrepos" ]; then
        try mkdir -p "$path_binrepos"
    fi

    local binhosts=$(cfg .portage.binhosts --asjson)
    local keys=($(cfg --from "$binhosts" keys[]))


    for key in "${keys}"; do
        local path_binrepo="$path_binrepos/$key.conf"
        local uri=$(cfg ".[\"$key\"]" --from "$binhosts")
        if [ -f "$path_binrepo" ]; then
            try sed -i -e "/^\[$key\]/,/^\[/ { /^sync-uri/ { s|sync-uri = .*|sync-uri = $uri|; h; } }" \
                   -e "/^\[$key\]/,/^\[/ { /^sync-uri/ { x; s|^|sync-uri = $uri\n|; x; } }" \
                   "$path_binrepo"
        else
            echo "[$key]" | try tee "$path_binrepo" >/dev/null
            echo "priority = 1" | try tee -a "$path_binrepo" >/dev/null
            echo "sync-uri = ${uri}" | try tee -a "$path_binrepo" >/dev/null
        fi
    done
}

setup_fstab() {
    if [ "$installation_type" != 'disk' ]; then
        log green 'Skipping fstab configuration due to directory installation'
        return
    fi
    local path_fstab="$path_chroot/etc/fstab"
    add_partition_entry() {
        local disk_device="$1"
        local partition_data="$2"
        local partition_data_index=$(cfg --from "${partition_data}" .index)
        local partition_data_filesystem=$(cfg --from "${partition_data}" .filesystem)
        local partition_data_mount_point=$(cfg --from "${partition_data}" .mount_point)
        local partition_data_flags=$(cfg --from "${partition_data}" .options)
        local partition_data_dump=$(cfg --from "${partition_data}" .dump)
        local partition_data_pass=$(cfg --from "${partition_data}" .pass)
        local partition_device="${disk_device}${partition_data_index}"
        local partition_mount_path="$path_chroot$partition_data_mount_point"
        local entry="${partition_device} ${partition_data_mount_point} ${partition_data_filesystem} ${partition_data_flags} ${partition_data_dump} ${partition_data_pass}"
        echo "$entry" | try tee -a "$path_fstab" >/dev/null
    }
    for part_config in "${disk_partitions_sorted_by_mount_order[@]}"; do
        add_partition_entry "$disk_device" "$part_config"
    done
}

setup_hostname() {
    hostname=$(cfg .hostname)
    if [ -z "$hostname" ]; then
        return
    fi
    local path_hostname="$path_chroot/etc/hostname"
    echo "$hostname" | try tee "$path_hostname" >/dev/null
}

setup_distcc_client() {
    if [ -z "$distcc_hosts" ]; then
        return
    fi
    chroot_call "distcc-config --set-hosts '$distcc_hosts'"
    append_make_config "FEATURES" "distcc"
}

setup_network_link() {
    local network_links=($(cfg .network.links[]))
    if [ -z "$network_links" ]; then
        return
    fi
    local path_initd="$path_chroot/etc/init.d"
    for link in "${network_links[@]}"; do
        ln -s 'net.lo' "$path_initd/net.$link"
    done
}

# Actions inside chroot =========================================================================

setup_main_repo() {
    # Silences warnings before emerge-webrsync was run.
    chroot_call 'mkdir -p /var/db/repos/gentoo'
}

update_environment() {
    chroot_call 'env-update && source /etc/profile'
}

setup_root_password() {
    if [ -z "$root_password" ]; then
        return
    fi
    chroot_call "echo -e '$root_password\n$root_password' | passwd 'root'"
}

setup_locales() {
    # Add locales.
    local path_locale="$path_chroot/etc/locale.gen"
    echo "C.UTF8 UTF-8" | try tee "$path_locale" >/dev/null

    local locales=$(cfg .locales --asjson)
    mapfile -t locales_list < <(cfg --from "${locales}" .list[])
    local locale_default=$(cfg --from "${locales}" .defaults)

    for locale in "${locales_list[@]}"; do
        echo "${locale}" >> "${path_locale}" | try tee -a "${path_locale}" >/dev/null
    done
    # Generate locales and select default.
    chroot_call 'locale-gen'
    if [ -n "${locale_default}" ]; then
        chroot_call "eselect locale set ${locale_default}"
    fi
    chroot_call 'env-update && source /etc/profile'
}

setup_timezone() {
    local timezone=$(cfg .timezone)
    if [ ! -z "$timezone" ]; then
        chroot_call "echo '$timezone' >> /etc/timezone"
        chroot_call "emerge --config sys-libs/timezone-data"
    fi
}

setup_portage_repository() {
    # Setup gentoo repo default configuration.
    try mkdir -p "$path_chroot/etc/portage/repos.conf"
    try cp "$path_chroot/usr/share/portage/config/repos.conf" "$path_chroot/etc/portage/repos.conf/gentoo.conf"
    # Synchronize portage tree.
    # Method 1:
    chroot_call "emerge-webrsync $quiet_flag"
    # method 2:
    #try wget "https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz" -O "${path_chroot}/portage-latest.tar.xz"
    #mkdir -p "${path_chroot}/var/db/repos/gentoo"
    #try tar -xvpf "${path_chroot}/portage-latest.tar.xz" -C "${path_chroot}/var/db/repos/gentoo"
    # Create keys.
    chroot_call "getuto"
    chroot_call "killall dirmngr"
}

install_updates() {
    if [ "$update" = true ]; then
        free_memory
        chroot_call "emerge --newuse --deep --update --with-bdeps=y @world $quiet_flag"
    fi
}

install_base_tools() {
    local packages=$(cfg .packages --asjson)
    local to_install=($(cfg .initial[] --from "$packages"))
    for package in "${to_install[@]}"; do
        free_memory
        chroot_call "FEATURES='-distcc' emerge --update --newuse --deep $package $quiet_flag"
    done
}

install_other_tools() {
    local packages=$(cfg .packages --asjson)
    local to_install=($(cfg .other[] --from "$packages"))
    for package in "${to_install[@]}"; do
        free_memory
        chroot_call "emerge --update --newuse --deep $package $quiet_flag"
    done
}

setup_overlays() {
    local overlays_eselect=($(cfg .portage.overlays.eselect[]))
    local overlays_manual=$(cfg .portage.overlays.manual --asjson)
    local keys=($(cfg --from "$overlays_manual" keys[]))
    for key in "${keys[@]}"; do
        local url=$(cfg --from "$overlays_manual" ".[\"$key\"]")
	chroot_call "eselect repository add $key git $url"
	chroot_call "emerge --sync $key"
    done

    for overlay in "${overlays_eselect[@]}"; do
        chroot_call "eselect repository enable ${overlay}"
	chroot_call "emerge --sync $repo"
    done
}

revdep_rebuild() {
    free_memory
    chroot_call "revdep-rebuild $quiet_flag"
}

setup_conf_d() {
    local conf_d=$(cfg .conf_d --asjson)
    local keys=($(cfg --from "$conf_d" keys[]))
    for key in "${keys[@]}"; do
        echo "" | try tee "$path_chroot/etc/conf.d/$key" >/dev/null
	mapfile -t lines < <(cfg --from "${conf_d}" ".[\"${key}\"][]")
	for line in "${lines[@]}"; do
            echo "$line" | try tee -a "$path_chroot/etc/conf.d/$key" >/dev/null
        done
    done
}

setup_autostart() {
    local rc_scripts=$(cfg .rc_scripts --asjson)

    local rc_default=($(cfg .default[] --from "$rc_scripts"))
    local rc_boot=($(cfg .boot[] --from "$rc_scripts"))

    for tool in "${rc_boot[@]}"; do
        chroot_call "rc-update add $tool boot"
    done
    for tool in "${rc_default[@]}"; do
        chroot_call "rc-update add $tool default"
    done
}

setup_user() {
    local user=$(cfg .user --asjson)
    if [[ "$user" != null ]]; then
	local user_username=$(cfg .username --from "$user")
	local user_password=$(cfg .password --from "$user")
	local user_groups=$(echo $(cfg .groups[] --from "$user") | sed 's/ /,/g')
 	local user_autologin=$(cfg .autologin --from "$user")
	local command="useradd -m -G ${user_groups} ${user_username}"
	chroot_call "${command}"
	if [ ! -z "${user_password}" ]; then
	    chroot_call "echo -e '${user_password}\n${user_password}' | passwd '${user_username}'"
        fi
 	if [ "${user_autologin}" = true ]; then
		chroot_call "sed -i '/^c1:12345:respawn:\/sbin\/agetty/c\c1:12345:respawn:\/sbin\/agetty --noclear --autologin ${user_username} 38400 tty1 linux' /etc/inittab"
  	fi
    fi
    # Allow wheel group to run sudo without password
    local path_sudoers_file="${path_chroot}/etc/sudoers"
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$path_sudoers_file"
}

setup_bootloader() {
        # Find root and boot partition
        root_partition=$(awk '!/^[[:space:]]*#/ && $2 == "/" {print $1}' ${path_chroot}/etc/fstab)
        boot_partition=$(awk '!/^[[:space:]]*#/ && $2 == "/boot" {print $1}' ${path_chroot}/etc/fstab)

        if [ ! -z "$root_partition" ]; then
                log magenta "Root partition detected: $root_partition."
                kboot_path="${path_chroot}/etc/kboot.conf"
        fi
	if [ ! -z "$boot_partition" ]; then
                log magenta "Boot partition detected: $boot_partition."
                kboot_path="${path_chroot}/boot/kboot.conf"
        fi
        if [ -z "$root_partition" ]; then
                log magenta "Skipping kboot configuration, because the root partition was not detected."
                log magenta "Please configure it manually."
        fi
        # If there is no separate /boot partition, the boot entry needs /boot prefix/
        if [ -z "$boot_partition" ]; then
                vmlinux_path_prefix="/boot"
        fi

	# Find installed kernels
        kernels=$(find ${path_chroot}/boot -type f \( -name 'vmlinux*' -o -name 'vmlinuz*' \))

        for kernel_path in ${kernels[@]}; do
            local kernel=$(basename $kernel_path)
            local PV=$(kernel_version=$(echo $kernel | sed -n 's/^vmlinu[xz]-\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p'))

            kboot_entry="Gentoo-Kernel-${PV}='${vmlinux_path_prefix}/$kernel root=${root_partition} video=ps3fb:mode:133'"
            if [ -f "${kboot_path}" ]; then
                grep -qxF "${kboot_entry}" "${kboot_path}" 2>/dev/null || sed -i "1i ${kboot_entry}" "${kboot_path}"
            else
               	echo "${kboot_entry}" >> "${kboot_path}"
            fi
            log magenta "KBOOT entry added to ${kboot_path}"
        done
}

# Cleaning ======================================================================================

cleanup() {
    # News
    chroot_call 'eselect news read all'
    # Portage
    chroot_call "emerge --depclean $quiet_flag"
    chroot_call "eclean --deep $quiet_flag distfiles"
    chroot_call "eclean --deep $quiet_flag packages"
    try rm -rf "$path_chroot/var/cache/distfiles"/*
    try rm -rf "$path_chroot/var/cache/binpkgs"/*
}

unprepare_chroot() {
    # Unmount devices
    try umount -l "$path_chroot/dev"{"/shm","/pts"}
    try umount -R "$path_chroot/proc"
    try umount -R "$path_chroot/run"
    try umount -R "$path_chroot/dev"
    try umount -R "$path_chroot/sys"
    # DNS information
    try rm "$path_chroot/etc/resolv.conf"
}

disk_unmount_partitions() {
    if [ "$installation_type" != 'disk' ]; then
        return
    fi
    unmount_filesystem_from_config() {
        local disk_device="$1"
        local partition_data="$2"
        local partition_data_index=$(cfg --from "${partition_data}" .index)
        local partition_data_filesystem=$(cfg --from "${partition_data}" .filesystem)
        local partition_data_mount_point=$(cfg --from "${partition_data}" .mount_point)
        local partition_device=${disk_device}${partition_data_index}
        if [ "$partition_data_filesystem" = 'swap' ]; then
            try swapoff $partition_device
        fi
        # Normal partitions are unmountd below
    }
    try umount -R $path_chroot

    # Reverse order of mounting
    for ((i = ${#_disk_partitions_sorted_by_mount_order[@]} - 1; i >= 0; i--)); do
        local part_config="${disk_partitions_sorted_by_mount_order[$i]}"
        unmount_filesystem_from_config $disk_device $part_config
    done
}

cleanup_directories() {
    try rm -rf "$path_tmp"
    if [ "$installation_type" = 'disk' ]; then
        try rmdir "$path_chroot"
    fi
}

summary() {
    log magenta "Installation completed"
    if [ "$installation_type" == 'directory' ]; then
        log yellow "Remeber to configure fstab and bootloader."
    fi
}
